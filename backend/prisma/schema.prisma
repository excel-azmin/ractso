// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  fullName  String? 
  password  String   @map("password")
  email     String   @unique
  username  String   @unique
  clerkId  String?   @unique
  roles    UserRole[] @default([USER]) // Default role is USER, can be ADMIN or MODERATOR
  hashedRefreshToken String? 
  status  UserStatus @default(ACTIVE) 

  
  bio       String?
  image     String?
  location  String?
  website   String?

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// Relationships
  posts     Post[] // One to many relationship with posts
  comments  Comment[] // One to many relationship with posts
  likes     Like[] // One to many relationship with posts

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("followers") // users followed by this user

  notifications Notification[] @relation("userNotifications") // notifications received by a user
  notificationsCreated Notification[] @relation("creatorNotifications") // notifications created by a user
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

model Post {
  id        String   @id @default(cuid())
  authorId  String  
  content   String?
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[] // One to many relationship with comments
  likes     Like[] // One to many relationship with likes
  notifications Notification[] 
  
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notifications Notification[] // One to many relationship with notifications

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relationships
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // Ensure a user can like a post only once
  @@index([userId, postId]) // Index for efficient querying
}


model Follows {
  id        String   @id @default(cuid())
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relationships
  follower User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Ensure a user can follow another user only once
  @@index([followerId, followingId]) // Index for efficient querying
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  creatorId String // The user who created the notification
  type      NotificationType // e.g., "like", "comment", "follow"
  read      Boolean @default(false)
  postId    String? // Optional post related to the notification
  commentId String? // Optional comment related to the notification
  createdAt DateTime @default(now())

  // Relationships
  user      User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User @relation("creatorNotifications", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt]) // Index for efficient querying
}


enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}